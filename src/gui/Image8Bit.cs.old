using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public class Image8Bit { 
	private BitmapData bmd; 
	private Bitmap b;

	public Image8Bit (Bitmap bitmap) { 
		if(bitmap.PixelFormat != System.Drawing.Imaging.PixelFormat.Format8bppIndexed)
			throw(new System.Exception("Invalid PixelFormat. 8 bit indexed required")); 
		b = bitmap;
		bmd = b.LockBits(new Rectangle(0, 0, b.Width,  b.Height), ImageLockMode.ReadWrite, b.PixelFormat); 
	}  

	public void Dispose() { b.UnlockBits(bmd); }  

	public unsafe System.Drawing.Color GetPixel(int x, int y) { 
		byte* p = (byte *)bmd.Scan0.ToPointer();
		int offset = y * bmd.Stride + x;
		return GetColorFromIndex(p[offset]);
	} 

	public unsafe void SetPixel(int x, int y, byte c) { 
		byte* p = (byte *)bmd.Scan0.ToPointer();
		int offset = y *bmd.Stride + x; 
		p[offset] = c; 
	}

	public void MakeGrayscale() { SetGrayscalePalette(this.b); }  

	public static void SetGrayscalePalette(Bitmap b) { 
		ColorPalette pal = b.Palette; 
		for(int i = 0; i < 256; i++) pal.Entries[i] = Color.FromArgb(255, i, i, i); 
		b.Palette = pal; 
	} 

	private System.Drawing.Color GetColorFromIndex(byte c) { return b.Palette.Entries[c]; } 
} 
